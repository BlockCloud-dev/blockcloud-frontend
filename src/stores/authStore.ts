import { create } from "zustand";
import { devtools } from "zustand/middleware";
import type { LoginRequest, AuthState, User } from "../types/auth";
import { AuthService, TokenStorage } from "../services/authService";

interface AuthActions {
  // Î°úÍ∑∏Ïù∏ Í¥ÄÎ†®
  loginWithGoogle: () => void;
  loginWithEmail: (credentials: LoginRequest) => Promise<void>;
  logout: () => Promise<void>;
  signOut: () => Promise<void>;

  // OAuth2 ÏΩúÎ∞± Ï≤òÎ¶¨
  handleOAuthCallback: (accessToken: string, user: User) => Promise<void>;

  // ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨
  refreshAccessToken: () => Promise<boolean>;

  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
  loadUserFromStorage: () => void;
  updateUser: (user: User) => void;

  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  setLoading: (isLoading: boolean) => void;
  setError: (error: string | null) => void;
  clearError: () => void;

  // Ï¥àÍ∏∞Ìôî
  initialize: () => Promise<void>;
}

type AuthStore = AuthState & AuthActions;

export const useAuthStore = create<AuthStore>()(
  devtools(
    (set, get) => ({
      // Ï¥àÍ∏∞ ÏÉÅÌÉú
      isAuthenticated: false,
      user: null,
      accessToken: null,
      refreshToken: null,
      isLoading: false,
      error: null,

      // Google OAuth Î°úÍ∑∏Ïù∏
      loginWithGoogle: () => {
        set({ error: null });
        const oauthUrl = `${
          import.meta.env.VITE_API_BASE_URL || "http://localhost:8080"
        }/oauth2/authorization/google`;
        window.location.href = oauthUrl;
      },

      // OAuth2 ÏΩúÎ∞± Ï≤òÎ¶¨
      handleOAuthCallback: async (accessToken: string, user: User) => {
        TokenStorage.saveTokens(accessToken, "");
        TokenStorage.saveUser(user);

        set({
          isAuthenticated: true,
          user,
          accessToken,
          refreshToken: null,
          isLoading: false,
          error: null,
        });
      },

      // Î°úÍ∑∏ÏïÑÏõÉ
      logout: async () => {
        const { accessToken } = get();

        try {
          if (accessToken) {
            await AuthService.logout(accessToken);
          }
        } catch (_) {
          // ÏÑúÎ≤Ñ Ïã§Ìå®Ìï¥ÎèÑ Î°úÏª¨ Ï†ïÎ¶¨
        } finally {
          TokenStorage.clearAll();
          set({
            isAuthenticated: false,
            user: null,
            accessToken: null,
            refreshToken: null,
            isLoading: false,
            error: null,
          });
        }
      },

      // Í≥ÑÏ†ï ÏôÑÏ†Ñ ÏÇ≠Ï†ú
      signOut: async () => {
        const { accessToken } = get();
        set({ isLoading: true, error: null });

        try {
          if (accessToken) {
            await AuthService.signOut(accessToken);
          }

          TokenStorage.clearAll();
          set({
            isAuthenticated: false,
            user: null,
            accessToken: null,
            refreshToken: null,
            isLoading: false,
            error: null,
          });
        } catch (error) {
          set({
            isLoading: false,
            error: error instanceof Error ? error.message : "Í≥ÑÏ†ï ÏÇ≠Ï†ú Ïã§Ìå®",
          });
        }
      },

      refreshAccessToken: async (): Promise<boolean> => {
        try {
          const response = await AuthService.refreshToken(); // ÏÑúÎ≤ÑÎ°úÎ∂ÄÌÑ∞ ÌÜ†ÌÅ∞ Í∞±Ïã† ÏöîÏ≤≠
          const { accessToken, refreshToken } = response;

          if (!accessToken) throw new Error("No access token returned");

          // ÌÜ†ÌÅ∞ Ï†ÄÏû•
          TokenStorage.saveTokens(
            accessToken,
            refreshToken ?? get().refreshToken ?? ""
          );

          // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
          set({
            accessToken,
            refreshToken: refreshToken ?? get().refreshToken ?? "",
          });

          return true;
        } catch (err) {
          // Ïã§Ìå® Ïãú Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
          await get().logout();
          return false;
        }
      },

      // Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú
      loadUserFromStorage: () => {
        const user = TokenStorage.getUser();
        const accessToken = TokenStorage.getAccessToken();
        const refreshToken = TokenStorage.getRefreshToken();

        if (user && accessToken) {
          set({
            isAuthenticated: true,
            user,
            accessToken,
            refreshToken: refreshToken || null,
          });
          console.log("‚úÖ Ï†ÄÏû•Îêú Ïù∏Ï¶ù Ï†ïÎ≥¥ Î≥µÏõê:", user.email);
        }
      },

      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
      updateUser: (user: User) => {
        TokenStorage.saveUser(user);
        set({ user });
      },

      setLoading: (isLoading: boolean) => {
        set({ isLoading });
      },

      setError: (error: string | null) => {
        set({ error });
      },

      clearError: () => {
        set({ error: null });
      },

      // Ïï± Ï¥àÍ∏∞Ìôî
      initialize: async () => {
        console.log("üîÑ Ïù∏Ï¶ù ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî ÏãúÏûë...");
        get().loadUserFromStorage();

        const { isAuthenticated, accessToken } = get();
        if (isAuthenticated && accessToken) {
          console.log("‚úÖ Í∏∞Ï°¥ Ïù∏Ï¶ù ÏÉÅÌÉú Ïú†ÏßÄ");
        } else {
          console.log("‚ÑπÔ∏è Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉú");
        }
      },
    }),
    { name: "auth-store" }
  )
);

// Ìé∏Ïùò ÌõÖ
export const useAuth = () => {
  const store = useAuthStore();
  return {
    isAuthenticated: store.isAuthenticated,
    user: store.user,
    isLoading: store.isLoading,
    error: store.error,

    loginWithGoogle: store.loginWithGoogle,
    loginWithEmail: store.loginWithEmail,
    logout: store.logout,
    signOut: store.signOut,
    clearError: store.clearError,

    handleOAuthCallback: store.handleOAuthCallback,

    userName: store.user?.username || "ÏÇ¨Ïö©Ïûê",
    userEmail: store.user?.email || "",
    userImage: store.user?.imgUrl || "",
  };
};
